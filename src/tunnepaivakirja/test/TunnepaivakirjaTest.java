package tunnepaivakirja.test;
// Generated by ComTest BEGIN
import tunnepaivakirja.SailoException;
import tunnepaivakirja.*;
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import static tunnepaivakirja.Tunnepaivakirja.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.03 23:29:08 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class TunnepaivakirjaTest {


  // Generated by ComTest BEGIN  // Tunnepaivakirja: 13
   private Tunnepaivakirja tunnepaivakirja; 
   private Merkinta pvm1; 
   private Merkinta pvm2; 
   private int jid1; 
   private int jid2; 
   private Tunnetila tunne1; 
   private Tunnetila tunne2; 
   private Tunnetila tunne3; 
   private Tunnetila tunne4; 
   public void alustaKirja() {
     tunnepaivakirja = new Tunnepaivakirja(); 
     pvm1 = new Merkinta(); pvm1.vastaaEnsimmainen(); pvm1.rekisteroi(); 
     pvm2 = new Merkinta(); pvm2.vastaaEnsimmainen(); pvm2.rekisteroi(); 
     jid1 = pvm1.getTunnusNro(); 
     jid2 = pvm2.getTunnusNro(); 
     try {
     tunnepaivakirja.lisaa(pvm1); 
     tunnepaivakirja.lisaa(pvm2); 
     } catch ( Exception e) {
        System.err.println(e.getMessage()); 
     }
   }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetMerkintoja48 */
  @Test
  public void testGetMerkintoja48() {    // Tunnepaivakirja: 48
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 50", 2, tunnepaivakirja.getMerkintoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi64 
   * @throws CloneNotSupportedException when error
   * @throws SailoException when error
   */
  @Test
  public void testEtsi64() throws CloneNotSupportedException, SailoException {    // Tunnepaivakirja: 64
    alustaKirja(); 
    Merkinta merkinta3 = new Merkinta(); merkinta3.rekisteroi(); 
    merkinta3.setPvm("12.10.2018"); 
    tunnepaivakirja.lisaa(merkinta3); 
    Collection<Merkinta> loytyneet = tunnepaivakirja.etsi("*12*",0); 
    assertEquals("From: Tunnepaivakirja line: 71", 1, loytyneet.size()); 
    Iterator<Merkinta> it = loytyneet.iterator(); 
    assertEquals("From: Tunnepaivakirja line: 73", true, it.next() == merkinta3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi85 
   * @throws CloneNotSupportedException when error
   * @throws SailoException when error
   */
  @Test
  public void testEtsi85() throws CloneNotSupportedException, SailoException {    // Tunnepaivakirja: 85
    alustaKirja(); 
    Merkinta merkinta3 = new Merkinta(); merkinta3.rekisteroi(); 
    merkinta3.setPvm("12.10.2018"); 
    tunnepaivakirja.lisaa(merkinta3); 
    Collection<Merkinta> loytyneet = tunnepaivakirja.etsi("*12*",0); 
    Iterator<Merkinta> it = loytyneet.iterator(); 
    assertEquals("From: Tunnepaivakirja line: 93", true, it.next() == merkinta3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi115 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi115() throws SailoException {    // Tunnepaivakirja: 115
    alustaKirja(); 
    TunnetilaID tid1 = new TunnetilaID(); 
    tid1.vastaaID(1); 
    TunnetilaID tid2 = new TunnetilaID(); 
    tid2.vastaaID(2); 
    TunnetilaID tid3 = new TunnetilaID(); 
    tid3.vastaaID(3); 
    tunnepaivakirja.lisaa(tid1); 
    tunnepaivakirja.lisaa(tid2); 
    tunnepaivakirja.lisaa(tid3); 
    assertEquals("From: Tunnepaivakirja line: 127", tid1, Tunnepaivakirja.etsi("Masennus")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi139 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi139() throws SailoException {    // Tunnepaivakirja: 139
    Tunnepaivakirja testi2 = new Tunnepaivakirja(); 
    Tunnetila tunne = new Tunnetila(); 
    tunne.vastaaTunnetila(2,10,7); 
    testi2.lisaa(tunne); 
    assertEquals("From: Tunnepaivakirja line: 145", 1, testi2.etsi(10).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaTunteita165 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaTunteita165() throws SailoException {    // Tunnepaivakirja: 165
    Tunnepaivakirja testi2 = new Tunnepaivakirja(); 
    Tunnetila tunne = new Tunnetila(); 
    tunne.vastaaTunnetila(2,11,7); 
    testi2.lisaa(tunne); 
    assertEquals("From: Tunnepaivakirja line: 171", 1, testi2.annaTunteita(11).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetTunnetila185 
   * @throws SailoException when error
   */
  @Test
  public void testGetTunnetila185() throws SailoException {    // Tunnepaivakirja: 185
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 188", 2, tunnepaivakirja.etsi("*",0).size()); 
    tunnepaivakirja.lisaa(pvm1); 
    assertEquals("From: Tunnepaivakirja line: 190", 3, tunnepaivakirja.etsi("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTunnetilaTesti204 */
  @Test
  public void testGetTunnetilaTesti204() {    // Tunnepaivakirja: 204
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 206", "Masennus", tunnepaivakirja.getTunnetilaTesti(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetTunnetilaMerkintaan223 
   * @throws SailoException when error
   */
  @Test
  public void testGetTunnetilaMerkintaan223() throws SailoException {    // Tunnepaivakirja: 223
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 226", "Masennus (7)", tunnepaivakirja.getTunnetilaMerkintaan(1,1,7)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPalautaID240 */
  @Test
  public void testPalautaID240() {    // Tunnepaivakirja: 240
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 242", 1, tunnepaivakirja.palautaID("Masennus")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa257 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa257() throws SailoException {    // Tunnepaivakirja: 257
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 260", 2, tunnepaivakirja.etsi("*",0).size()); 
    tunnepaivakirja.korvaaTaiLisaa(pvm1); 
    assertEquals("From: Tunnepaivakirja line: 262", 2, tunnepaivakirja.etsi("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaa273 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaa273() throws SailoException,CloneNotSupportedException {    // Tunnepaivakirja: 273
    alustaKirja(); 
    Tunnetilat tunnetilat = new Tunnetilat(); 
    Tunnetila tun1 = new Tunnetila(), tun2 = new Tunnetila(); 
    tun1.setTunnusNro(4); 
    tun2.setTunnusNro(2); 
    assertEquals("From: Tunnepaivakirja line: 281", 0, tunnetilat.getLkm()); 
    tunnetilat.korvaa(tun1); assertEquals("From: Tunnepaivakirja line: 282", 1, tunnetilat.getLkm()); 
    tunnetilat.korvaa(tun2); assertEquals("From: Tunnepaivakirja line: 283", 2, tunnetilat.getLkm()); 
    Tunnetila tun3 = new Tunnetila(); 
    tun3.vastaaTunnetila(1,1,7); 
    tun3.setTunnusNro(4); 
    Iterator<Tunnetila> i2=tunnetilat.iterator(); 
    assertEquals("From: Tunnepaivakirja line: 288", tun1, i2.next()); 
    tunnepaivakirja.korvaa(tun3); assertEquals("From: Tunnepaivakirja line: 289", 2, tunnetilat.getLkm()); 
    i2=tunnetilat.iterator(); 
    Tunnetila h = i2.next(); 
    assertEquals("From: Tunnepaivakirja line: 292", tun3, h); 
    assertEquals("From: Tunnepaivakirja line: 293", false, h == tun1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa305 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa305() throws SailoException {    // Tunnepaivakirja: 305
    Tunnepaivakirja kirja = new Tunnepaivakirja(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(); 
    kirja.lisaa(pvm1); 
    kirja.lisaa(pvm2); 
    kirja.lisaa(pvm1); 
    Collection<Merkinta> loytyneet = kirja.etsi("",-1); 
    Iterator<Merkinta> it = loytyneet.iterator(); 
    assertEquals("From: Tunnepaivakirja line: 315", pvm1, it.next()); 
    assertEquals("From: Tunnepaivakirja line: 316", pvm2, it.next()); 
    assertEquals("From: Tunnepaivakirja line: 317", pvm1, it.next()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa329 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa329() throws SailoException {    // Tunnepaivakirja: 329
    alustaKirja(); 
    Tunnetila tun1 = new Tunnetila(); 
    tun1.vastaaTunnetila(1, 1, 7); 
    tun1.setTunnusNro(1); 
    Tunnetila tun2 = new Tunnetila(); 
    tunnepaivakirja.lisaa(tun1); 
    tunnepaivakirja.lisaa(tun2); 
    tunnepaivakirja.lisaa(tun1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa352 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa352() throws SailoException {    // Tunnepaivakirja: 352
    Tunnepaivakirja kirja = new Tunnepaivakirja(); 
    TunnetilaID tun1 = new TunnetilaID(); 
    tun1.setTunnusNro(1); 
    tun1.setTunne("Onni"); 
    TunnetilaID tun2 = new TunnetilaID(); 
    kirja.lisaa(tun1); 
    kirja.lisaa(tun2); 
    kirja.lisaa(tun1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista374 
   * @throws Exception when error
   */
  @Test
  public void testPoista374() throws Exception {    // Tunnepaivakirja: 374
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 377", 2, tunnepaivakirja.etsi("*",0).size()); 
    assertEquals("From: Tunnepaivakirja line: 378", 1, tunnepaivakirja.poista(pvm1)); 
    assertEquals("From: Tunnepaivakirja line: 379", 1, tunnepaivakirja.etsi("*",0).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista392 
   * @throws Exception when error
   */
  @Test
  public void testPoista392() throws Exception {    // Tunnepaivakirja: 392
    alustaKirja(); 
    Tunnetila tunne = new Tunnetila(); 
    tunnepaivakirja.lisaa(tunne); 
    Tunnetilat tunteet = tunnepaivakirja.annaTunteet(); 
    assertEquals("From: Tunnepaivakirja line: 398", 2, tunteet.getLkm()); 
    assertEquals("From: Tunnepaivakirja line: 399", 1, tunnepaivakirja.poista(tunne)); 
    Tunnetilat tunteet2 = tunnepaivakirja.annaTunteet(); 
    assertEquals("From: Tunnepaivakirja line: 401", 1, tunteet2.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaMerkinta425 
   * @throws IndexOutOfBoundsException when error
   */
  @Test
  public void testAnnaMerkinta425() throws IndexOutOfBoundsException {    // Tunnepaivakirja: 425
    alustaKirja(); 
    assertEquals("From: Tunnepaivakirja line: 428", pvm2, tunnepaivakirja.annaMerkinta(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta440 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta440() throws SailoException {    // Tunnepaivakirja: 440
    String hakemisto = "testi"; 
    File ftied  = new File(hakemisto+"/merkinnat.dat"); 
    ftied.delete(); 
    Tunnepaivakirja tunnepaivakirja5 = new Tunnepaivakirja();  // tiedostoja ei ole, tulee poikkeus 
    try {
    tunnepaivakirja5.lueTiedostosta(hakemisto); 
    fail("Tunnepaivakirja: 450 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    alustaKirja(); 
    tunnepaivakirja.setTiedosto(hakemisto);  // nimi annettava koska uusi poisti sen
    tunnepaivakirja.tallenna(); 
    Collection<Merkinta> kaikki = tunnepaivakirja.etsi("",-1); 
    Iterator<Merkinta> it = kaikki.iterator(); 
    assertEquals("From: Tunnepaivakirja line: 456", pvm1, it.next()); 
    assertEquals("From: Tunnepaivakirja line: 457", pvm2, it.next()); 
    assertEquals("From: Tunnepaivakirja line: 458", false, it.hasNext()); 
    tunnepaivakirja.lisaa(pvm2); 
    tunnepaivakirja.tallenna(); 
    assertEquals("From: Tunnepaivakirja line: 461", true, ftied.delete()); 
    File fbak = new File(hakemisto+"/merkinnat.bak"); 
    assertEquals("From: Tunnepaivakirja line: 463", true, fbak.delete()); 
  } // Generated by ComTest END
}