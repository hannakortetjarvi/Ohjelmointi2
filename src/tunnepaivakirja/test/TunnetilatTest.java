package tunnepaivakirja.test;
// Generated by ComTest BEGIN
import tunnepaivakirja.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.04.27 20:34:00 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class TunnetilatTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaa64 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaa64() throws SailoException,CloneNotSupportedException {    // Tunnetilat: 64
    Tunnetilat tunnetilat = new Tunnetilat(); 
    Tunnetila tun1 = new Tunnetila(), tun2 = new Tunnetila(); 
    tun1.setTunnusNro(1); 
    tun2.setTunnusNro(2); 
    assertEquals("From: Tunnetilat line: 71", 0, tunnetilat.getLkm()); 
    tunnetilat.korvaa(tun1); assertEquals("From: Tunnetilat line: 72", 1, tunnetilat.getLkm()); 
    tunnetilat.korvaa(tun2); assertEquals("From: Tunnetilat line: 73", 2, tunnetilat.getLkm()); 
    Tunnetila tun3 = new Tunnetila(); 
    tun3.vastaaTunnetila(1,1,7); 
    tun3.setTunnusNro(1); 
    Iterator<Tunnetila> i2=tunnetilat.iterator(); 
    assertEquals("From: Tunnetilat line: 78", tun1, i2.next()); 
    tunnetilat.korvaa(tun3); assertEquals("From: Tunnetilat line: 79", 2, tunnetilat.getLkm()); 
    i2=tunnetilat.iterator(); 
    Tunnetila h = i2.next(); 
    assertEquals("From: Tunnetilat line: 82", tun3, h); 
    assertEquals("From: Tunnetilat line: 83", true, h == tun3); 
    assertEquals("From: Tunnetilat line: 84", false, h == tun1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa114 */
  @Test
  public void testLisaa114() {    // Tunnetilat: 114
    Tunnetila tun = new Tunnetila(); 
    Tunnetilat tunteet = new Tunnetilat(); 
    tunteet.lisaa(tun); 
    assertEquals("From: Tunnetilat line: 118", tun, tunteet.anna(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista135 */
  @Test
  public void testPoista135() {    // Tunnetilat: 135
    Tunnetilat tunteet = new Tunnetilat(); 
    Tunnetila tunne1 = new Tunnetila(); tunne1.vastaaTunnetila(1,1,7); 
    Tunnetila tunne2 = new Tunnetila(); tunne2.vastaaTunnetila(2,1,6); 
    tunteet.lisaa(tunne1); 
    tunteet.lisaa(tunne2); 
    assertEquals("From: Tunnetilat line: 142", 1, tunteet.poista(tunne1.getTunnusNro())); assertEquals("From: Tunnetilat line: 142", 1, tunteet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiId162 */
  @Test
  public void testEtsiId162() {    // Tunnetilat: 162
    Tunnetilat tunteet = new Tunnetilat(); 
    Tunnetila tun = new Tunnetila(); 
    tun.setTunnusNro(1); 
    tunteet.lisaa(tun); 
    assertEquals("From: Tunnetilat line: 167", -1, tunteet.etsiId(0)); 
    assertEquals("From: Tunnetilat line: 168", 0, tunteet.etsiId(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta184 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta184() throws SailoException {    // Tunnetilat: 184
    Tunnetilat tunteet = new Tunnetilat(); 
    Tunnetila tunne1 = new Tunnetila(); tunne1.vastaaTunnetila(1,1,1); 
    Tunnetila tunne2 = new Tunnetila(); tunne2.vastaaTunnetila(2,2,1); 
    Tunnetila tunne3 = new Tunnetila(); tunne3.vastaaTunnetila(1,1,1); 
    Tunnetila tunne4 = new Tunnetila(); tunne4.vastaaTunnetila(2,2,1); 
    Tunnetila tunne5 = new Tunnetila(); tunne5.vastaaTunnetila(1,1,1); 
    String tiedNimi = "testikirja"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    tunteet.lueTiedostosta(tiedNimi); 
    fail("Tunnetilat: 196 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    tunteet.lisaa(tunne1); 
    tunteet.lisaa(tunne2); 
    tunteet.lisaa(tunne3); 
    tunteet.lisaa(tunne4); 
    tunteet.lisaa(tunne5); 
    tunteet.tallenna(); 
    tunteet = new Tunnetilat(); 
    tunteet.lueTiedostosta(tiedNimi); 
    Iterator<Tunnetila> i = tunteet.iterator(); 
    assertEquals("From: Tunnetilat line: 206", tunne1.toString(), i.next().toString()); 
    assertEquals("From: Tunnetilat line: 207", tunne2.toString(), i.next().toString()); 
    assertEquals("From: Tunnetilat line: 208", tunne3.toString(), i.next().toString()); 
    assertEquals("From: Tunnetilat line: 209", tunne4.toString(), i.next().toString()); 
    assertEquals("From: Tunnetilat line: 210", tunne5.toString(), i.next().toString()); 
    assertEquals("From: Tunnetilat line: 211", false, i.hasNext()); 
    tunteet.lisaa(tunne1); 
    tunteet.tallenna(); 
    assertEquals("From: Tunnetilat line: 214", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Tunnetilat line: 216", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetLkm277 */
  @Test
  public void testGetLkm277() {    // Tunnetilat: 277
    Tunnetilat tunteet = new Tunnetilat(); 
    Tunnetila tun1 = new Tunnetila(); 
    Tunnetila tun2 = new Tunnetila(); 
    tunteet.lisaa(tun1); 
    tunteet.lisaa(tun2); 
    assertEquals("From: Tunnetilat line: 283", 2, tunteet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTunnetilatIterator293 
   * @throws SailoException when error
   */
  @Test
  public void testTunnetilatIterator293() throws SailoException {    // Tunnetilat: 293
    Tunnetilat tunnetilat = new Tunnetilat(); 
    Tunnetila tun1 = new Tunnetila(); 
    Tunnetila tun2 = new Tunnetila(); 
    tun1.rekisteroi(); tun2.rekisteroi(); 
    tunnetilat.lisaa(tun1); 
    tunnetilat.lisaa(tun2); 
    tunnetilat.lisaa(tun1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Tunnetila tun : tunnetilat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+tun.getTunnusNro()); 
    String tulos = " " + tun1.getTunnusNro() + " " + tun2.getTunnusNro() + " " + tun1.getTunnusNro(); 
    assertEquals("From: Tunnetilat line: 313", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Tunnetila>  i=tunnetilat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Tunnetila tunne = i.next(); 
    ids.append(" "+tunne.getTunnusNro()); 
    }
    assertEquals("From: Tunnetilat line: 321", tulos, ids.toString()); 
    Iterator<Tunnetila>  i=tunnetilat.iterator(); 
    assertEquals("From: Tunnetilat line: 324", true, i.next() == tun1); 
    assertEquals("From: Tunnetilat line: 325", true, i.next() == tun2); 
    assertEquals("From: Tunnetilat line: 326", true, i.next() == tun1); 
    try {
    i.next(); 
    fail("Tunnetilat: 328 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}