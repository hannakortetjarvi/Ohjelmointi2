package tunnepaivakirja.test;
// Generated by ComTest BEGIN
import java.io.File;
import tunnepaivakirja.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.05.04 22:28:07 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class MerkinnatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa87 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa87() throws SailoException {    // Merkinnat: 87
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(); 
    assertEquals("From: Merkinnat line: 91", 0, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 92", 1, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm2); assertEquals("From: Merkinnat line: 93", 2, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 94", 3, merkinnat.getLkm()); 
    assertEquals("From: Merkinnat line: 95", pvm1, merkinnat.anna(0)); 
    assertEquals("From: Merkinnat line: 96", pvm2, merkinnat.anna(1)); 
    assertEquals("From: Merkinnat line: 97", pvm1, merkinnat.anna(2)); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 98", 4, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 99", 5, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista143 
   * @throws SailoException when error
   */
  @Test
  public void testPoista143() throws SailoException {    // Merkinnat: 143
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(), pvm3 = new Merkinta(); 
    pvm1.rekisteroi(); pvm2.rekisteroi(); pvm3.rekisteroi(); 
    int id1 = pvm1.getTunnusNro(); 
    merkinnat.lisaa(pvm1); merkinnat.lisaa(pvm2); merkinnat.lisaa(pvm3); 
    assertEquals("From: Merkinnat line: 150", 1, merkinnat.poista(id1+1)); 
    assertEquals("From: Merkinnat line: 151", 2, merkinnat.getLkm()); 
    assertEquals("From: Merkinnat line: 152", 1, merkinnat.poista(id1)); assertEquals("From: Merkinnat line: 152", 1, merkinnat.getLkm()); 
    assertEquals("From: Merkinnat line: 153", 0, merkinnat.poista(id1+3)); assertEquals("From: Merkinnat line: 153", 1, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta184 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta184() throws SailoException {    // Merkinnat: 184
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(); 
    String hakemisto = "testi"; 
    String tiedNimi = hakemisto+"/merkinnat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    merkinnat.lueTiedostosta(tiedNimi); 
    fail("Merkinnat: 195 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    merkinnat.lisaa(pvm1); 
    merkinnat.lisaa(pvm2); 
    merkinnat.tallenna(); 
    merkinnat = new Merkinnat();  // Poistetaan vanhat luomalla uusi
    merkinnat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Merkinta> i = merkinnat.iterator(); 
    assertEquals("From: Merkinnat line: 202", pvm1, i.next()); 
    assertEquals("From: Merkinnat line: 203", pvm2, i.next()); 
    assertEquals("From: Merkinnat line: 204", false, i.hasNext()); 
    merkinnat.lisaa(pvm2); 
    merkinnat.tallenna(); 
    assertEquals("From: Merkinnat line: 207", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Merkinnat line: 209", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testMerkinnatIterator316 
   * @throws SailoException when error
   */
  @Test
  public void testMerkinnatIterator316() throws SailoException {    // Merkinnat: 316
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(); 
    pvm1.rekisteroi(); pvm2.rekisteroi(); 
    merkinnat.lisaa(pvm1); 
    merkinnat.lisaa(pvm2); 
    merkinnat.lisaa(pvm1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Merkinta pvm : merkinnat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+pvm.getTunnusNro()); 
    String tulos = " " + pvm1.getTunnusNro() + " " + pvm2.getTunnusNro() + " " + pvm1.getTunnusNro(); 
    assertEquals("From: Merkinnat line: 335", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Merkinta>  i=merkinnat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Merkinta pvm = i.next(); 
    ids.append(" "+pvm.getTunnusNro()); 
    }
    assertEquals("From: Merkinnat line: 343", tulos, ids.toString()); 
    Iterator<Merkinta>  i=merkinnat.iterator(); 
    assertEquals("From: Merkinnat line: 346", true, i.next() == pvm1); 
    assertEquals("From: Merkinnat line: 347", true, i.next() == pvm2); 
    assertEquals("From: Merkinnat line: 348", true, i.next() == pvm1); 
    try {
    i.next(); 
    fail("Merkinnat: 350 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}